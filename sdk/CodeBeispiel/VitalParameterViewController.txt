//
//  VitalParameterViewController.swift
//  CorpulsKit Reference App
//
//  Created by Markus BÃ¶sch on 15.04.21.
//

import Foundation
import UIKit
import CorpulsKit

enum VitalParameterSource {
    case regular(_ vitalParameterList: VitalParameterList)
    case trend(_ trend: VitalParameterTrend, type: VitalParameterType)

    var parameters: [VitalParameter] {
        switch self {
        case .regular(let list):
            return list.parameters
        case .trend(let trend, let type):
            return trend.parameters(for: type)
        }
    }

    var count: Int {
        switch self {
        case .regular(let list):
            return list.parameters.count

        case .trend(let trend, _):
            return trend.entries.count
        }
    }

    func leftLabel(at indexPath: IndexPath) -> String {
        switch self {
        case .regular:
            return parameters[indexPath.row].typeString
        case .trend(let trend, _):
            let entry = trend.entries[indexPath.row]

            let time = DateFormatter.time.string(from: entry.entryDate)
            return String(format: "%@ (%03i)", time, entry.entryMinute)
        }
    }

    func rightLabel(at indexPath: IndexPath) -> String {
        switch self {
        case .regular:
            return parameters[indexPath.row].text
        case .trend(let trend, let type):
            let entry = trend.entries[indexPath.row]

            return entry.parameter(for: type)?.valueText ?? "--"
        }
    }

    func backgroundColor(at indexPath: IndexPath) -> UIColor? {
        switch self {
        case .regular:
            return nil

        case .trend(let trend, _):
            let entry = trend.entries[indexPath.row]

            return entry.hasNibpValue ? .ble.blue.withAlphaComponent(0.25) : nil
        }
    }

    func headerView(width: CGFloat) -> UIView? {
        switch self {
        case .regular:
            return nil
        case .trend(let trend, _):
            let label = UILabel()

            label.text = "Mission start: \(DateFormatter.time.string(from: trend.missionCreationDate))"
            label.textColor = .white
            label.frame.size = CGSize(width: width, height: 30)
            label.textAlignment = .center
            label.font = .preferredFont(forTextStyle: .headline)

            return label
        }
    }
}

final class VitalParameterViewController: TableViewController {
    // MARK: - Properties

    let vitalParameterSource: VitalParameterSource

    private let reuseIdentifier = "VitalParameterCell"

    // MARK: - Initialization

    init(vitalParameterSource: VitalParameterSource) {
        self.vitalParameterSource = vitalParameterSource

        super.init(style: .insetGrouped)

        title = "Vital Parameters"
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: - UIViewController

    override func viewDidLoad() {
        super.viewDidLoad()

        tableView.tableHeaderView = vitalParameterSource.headerView(width: view.bounds.width)
    }

    // MARK: - Public

    public func scrollToBottom(animated: Bool = false) {
        let lastRow = tableView.numberOfRows(inSection: 0) - 1

        guard lastRow >= 0 else { return }

        tableView.scrollToRow(at: IndexPath(row: lastRow, section: 0), at: .bottom, animated: animated)
    }

    // MARK: - UITableViewDataSource

    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return vitalParameterSource.count
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell: UITableViewCell! = tableView.dequeueReusableCell(withIdentifier: reuseIdentifier)

        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)

            cell.textLabel?.font = .monospacedDigitSystemFont(ofSize: 15, weight: .light)
            cell.detailTextLabel?.font = .monospacedDigitSystemFont(ofSize: 15, weight: .bold)
        }

        cell.textLabel?.text = vitalParameterSource.leftLabel(at: indexPath)
        cell.detailTextLabel?.text = vitalParameterSource.rightLabel(at: indexPath)
        cell.backgroundColor = vitalParameterSource.backgroundColor(at: indexPath)

        return cell
    }

    // MARK: - UITableViewDelegate

    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
}
