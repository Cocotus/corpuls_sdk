//
//  DECGMetadataViewController.swift
//  BluetoothApp
//
//  Created by Fabian Rottensteiner on 27.03.24.
//

import UIKit

class DECGMetadataViewController: UIViewController {
    private let json: [String: Any]?

    private lazy var textView: UITextView = {
        let view = UITextView()
        view.font = .preferredFont(forTextStyle: .body)
        view.isEditable = false
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .clear

        return view
    }()

    init(with json: [String: Any]?) {
        self.json = json

        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        view.backgroundColor = .ble.background
        title = "DECG Metadata"

        setupSubviews()

        guard let json else {
            let alert = UIAlertController(title: "Error",
                                          message: "Requesting the patient data resulted in an error.",
                                          preferredStyle: .alert)

            alert.addAction(UIAlertAction(title: "Ok", style: .cancel, handler: { _ in
                self.navigationController?.popViewController(animated: true)
            }))

            return
        }

        formatAndShow(json)
    }

    private func setupSubviews() {
        view.addSubview(textView)

        NSLayoutConstraint.activate([
            textView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 8),
            textView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -8),
            textView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            textView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
    }

    func formatAndShow(_ json: [String: Any]) {
        var newJson = json

        if var patientJson = json["patient"] as? [String: Any], let birthday = patientJson["birthday"] as? Date {
            let dateFormatter = ISO8601DateFormatter()
            let dateString = dateFormatter.string(from: birthday)

            patientJson["birthday"] = dateString
            newJson["patient"] = patientJson
        }

        do {
            let jsonData = try JSONSerialization.data(withJSONObject: newJson, options: .prettyPrinted)

            if let jsonString = String(data: jsonData, encoding: .utf8) {
                let rows = jsonString.components(separatedBy: .newlines)
                let adjustedRows = rows.map { row in
                    let level = row.prefix(while: { $0 == " " }).count

                    return String(repeating: "  ", count: level) + row.trimmingCharacters(in: .whitespaces)
                }

                DispatchQueue.main.async {
                    self.textView.text = adjustedRows.joined(separator: "\n")
                }
            }
        } catch {
            print("Converting JSON failed: \(error.localizedDescription)")
        }
    }
}
