//
//  EventsTableViewController.swift
//  BluetoothApp
//
//  Created by Fabian Rottensteiner on 10.07.24.
//

import UIKit
import CorpulsKit

class EventsTableViewController: UIViewController {
    private let ble = CorpulsBLE.shared

    private var events = [EventData.Event]() {
        didSet {
            DispatchQueue.asyncMainIfNeeded {
                self.tableView.reloadData()
            }
        }
    }

    private lazy var tableView: UITableView = {
        let tableView = UITableView()
        tableView.register(EventTableViewCell.self, forCellReuseIdentifier: EventTableViewCell.reuseIdentifier)
        tableView.dataSource = self

        return tableView
    }()

    override func viewDidLoad() {
        super.viewDidLoad()

        view.backgroundColor = .black
        title = "Events"

        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .refresh,
                                                            target: self,
                                                            action: #selector(didTapRefresh))

        setupSubviews()
        fetchEvents()
    }

    private func fetchEvents(with filter: ((EventData.Event) -> Bool)? = nil) {
        events = []

        Task {
            do {
                let eventData = try await ble.requestEvents(missionStartOffset: 0, filter: filter)

                DispatchQueue.main.async {
                    self.events = eventData.events
                }
            } catch {
                presentError(error) {
                    self.navigationController?.popViewController(animated: true)
                }
            }
        }
    }

    private func setupSubviews() {
        tableView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(tableView)

        NSLayoutConstraint.activate([
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.topAnchor.constraint(equalTo: view.topAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }

    @objc private func didTapRefresh() {
        fetchEvents()
    }
}

// MARK: - UITableViewDataSource

extension EventsTableViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        events.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: EventTableViewCell.reuseIdentifier, for: indexPath) as! EventTableViewCell
        cell.config(with: events[indexPath.row])

        return cell
    }
}
