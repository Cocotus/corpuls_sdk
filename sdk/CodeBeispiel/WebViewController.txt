//
//  WebViewController.swift
//  CorpulsKit Reference App
//
//  Created by Markus BÃ¶sch on 16.12.21.
//

import UIKit
@preconcurrency import WebKit

class WebViewController: UIViewController {
    // MARK: - Properties
    let url: URL
    let isLocal: Bool

    lazy var webView = WKWebView()

    // MARK: - Initialization

    init(url: URL, title: String, isLocal: Bool) {
        self.url = url
        self.isLocal = isLocal

        super.init(nibName: nil, bundle: nil)

        self.title = title
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: - UIViewController

    override func viewDidLoad() {
        super.viewDidLoad()

        view.backgroundColor = .ble.background

        setupWebView()
        setupTapGestureRecognizer()
        loadRequest()
    }

    // MARK: - Setup

    private func setupWebView() {
        view.addSubview(webView)

        webView.pinConstraints(to: view)
        webView.isOpaque = false
        webView.navigationDelegate = self
    }

    // MARK: - Actions

    private func setupTapGestureRecognizer() {
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(didTapNavigationBar))
        navigationController?.navigationBar.addGestureRecognizer(tapGestureRecognizer)
    }

    @objc private func didTapNavigationBar() {
        webView.scrollView.setContentOffset(.zero, animated: true)
    }

    private func loadRequest() {
        if isLocal {
            webView.loadFileURL(url, allowingReadAccessTo: url)
        } else {
            webView.load(URLRequest(url: url))
        }
    }
}

// MARK: - WKNavigationDelegate

extension WebViewController: WKNavigationDelegate {
    func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
        guard
            let url = navigationAction.request.url,
            url.scheme == "https"
        else {
            decisionHandler(.allow)
            return
        }

        UIApplication.shared.open(url) { _ in
            decisionHandler(.cancel)
        }
    }
}
