//
//  CharacteristicViewController.swift
//  CorpulsKit Reference App
//
//  Created by Markus BÃ¶sch on 18.08.21.
//

import UIKit
import CorpulsKit


final class CharacteristicViewController: TableViewController {
    // MARK: - Properties

    let characteristic: Characteristic

    var values = [(payload: CharacteristicValue, date: Date)]()

    var menu: UIMenu {
        let isSubscribed = CorpulsBLE.shared.isCharacteristicSubscribed(characteristic)
        let subscribeTitle = isSubscribed ? "Unsubscribe" : "Subscribe"
        let subscribeImageName = isSubscribed ? "bell.slash" : "bell"

        let actions: [UIAction] = [
            UIAction(title: "Refresh", image: UIImage(systemName: "arrow.clockwise")) { _ in
                self.didTapRefreshMenuButton()
            },
            UIAction(title: subscribeTitle, image: UIImage(systemName: subscribeImageName)) { _ in
                self.toggleNotify()
            },
            UIAction(title: "Write", image: UIImage(systemName: "paperplane")) { _ in
                self.writeValue(self.values.first?.payload)
            }
        ]

        return UIMenu(children: actions)
    }

    // MARK: - Initialization

    init(characteristic: Characteristic) {
        self.characteristic = characteristic

        super.init(nibName: nil, bundle: nil)

        title = characteristic.name
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: - UIViewController

    public override func viewDidLoad() {
        super.viewDidLoad()

        setupNotifications()

        navigationItem.rightBarButtonItem = UIBarButtonItem(systemItem: .action, primaryAction: nil, menu: menu)

        let refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: #selector(didTriggerRefreshControl), for: .valueChanged)
        refreshControl.tintColor = .ble.blue

        self.refreshControl = refreshControl

        requestCharacteristic()
    }

    // MARK: - Notifications

    private func setupNotifications() {
        NotificationCenter.default.addObserver(self, selector: #selector(didReceiveCharacteristicNotification(_:)), name: .didReceiveNotification, object: nil)
    }

    @objc private func didReceiveCharacteristicNotification(_ notification: Notification) {
        guard
            let characteristic = notification.object as? Characteristic,
            characteristic.name == self.characteristic.name
        else {
            return
        }

        requestCharacteristic()
    }

    // MARK: - Actions

    @objc private func didTriggerRefreshControl() {
        requestCharacteristic(animated: true)
    }

    @objc private func didTapRefreshMenuButton() {
        requestCharacteristic(animated: false)
    }

    private func requestCharacteristic(animated: Bool = false) {
        if animated {
            beginRefreshing()
        }

        CorpulsBLE.shared.requestCharacteristic(characteristic) { [weak self] in
            guard let self = self else { return }

            self.endRefreshingDelayed()

            switch $0 {
            case .success(let value):
                self.addValue(value, animated: animated)

            case .failure(let error):
                self.presentError(error)
            }
        }
    }

    private func toggleNotify() {
        let completion: ((Result<Void, SyncError>) -> Void) = {
            switch $0 {
            case .success():
                UISelectionFeedbackGenerator().selectionChanged()
                self.updateMenu()

            case .failure(let error):
                self.presentError(error)
            }
        }

        if CorpulsBLE.shared.isCharacteristicSubscribed(characteristic) {
            CorpulsBLE.shared.unsubscribe(for: characteristic, completion: completion)
        } else {
            CorpulsBLE.shared.subscribe(for: characteristic, completion: completion)
        }
    }

    private func writeValue(_ value: CharacteristicValue?) {
        guard
            let value = value,
            !value.placeholders.isEmpty
        else {
            presentAlert(title: "Write error", message: "Characteristic is not writable", handler: nil)
            return
        }

        let inputViewController = InputTableViewController(value: value)
        inputViewController.delegate = self

        navigationController?.pushViewController(inputViewController, animated: true)
    }

    private func updateMenu() {
        navigationItem.rightBarButtonItem?.menu = menu
    }

    private func addValue(_ value: CharacteristicValue, animated: Bool) {
        if animated {
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                self.values.insert((value, Date()), at: 0)

                let indexPath = IndexPath(row: 0, section: 0)
                self.tableView.insertRows(at: [indexPath], with: .fade)
            }
        } else {
            values.insert((value, Date()), at: 0)
            tableView.reloadData()
        }
    }

    // MARK: - Refresh

    private func beginRefreshing() {
        refreshControl?.alpha = 1
        refreshControl?.beginRefreshing()
    }

    private func endRefreshingDelayed() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            self.refreshControl?.endRefreshing()
        }

        DispatchQueue.main.asyncAfter(deadline: .now() + 0.15) {
            self.refreshControl?.alpha = 0
        }
    }

    // MARK: - UITableViewDataSource

    public override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    public override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return values.count
    }

    public override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell(style: .subtitle, reuseIdentifier: nil)
        let value = values[indexPath.row]

        let string = value.payload.input.trimmingCharacters(in: .whitespacesAndNewlines)
        let text = string.isEmpty ? "<empty>" : string

        cell.textLabel?.numberOfLines = 0
        cell.textLabel?.text = text
        cell.detailTextLabel?.text = DateFormatter.time.string(from: value.date)
        cell.backgroundColor = .ble.background

        return cell
    }

    // MARK: - UITableViewDelegate

    public override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)

        let value = values[indexPath.row].payload
        writeValue(value)
    }
}

// MARK: - InputTableViewControllerDelegate

extension CharacteristicViewController: InputTableViewControllerDelegate {
    func didFinish(input: CharacteristicValue, output: CharacteristicValue) {
        guard input != output else { return }

        CorpulsBLE.shared.writeValue(output) { [weak self] in
            guard let self = self else { return }

            switch $0 {
            case .success():
                self.addValue(output, animated: true)

            case .failure(let error):
                self.presentError(error)
            }
        }
    }
}
